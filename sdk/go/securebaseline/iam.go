// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package securebaseline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Iam struct {
	pulumi.ResourceState
}

// NewIam registers a new resource with the given unique name, arguments, and options.
func NewIam(ctx *pulumi.Context,
	name string, args *IamArgs, opts ...pulumi.ResourceOption) (*Iam, error) {
	if args == nil {
		args = &IamArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Iam
	err := ctx.RegisterRemoteComponentResource("securebaseline:index:Iam", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type iamArgs struct {
	AllowUsersToChangePassword *bool    `pulumi:"allowUsersToChangePassword"`
	EnablePasswordPolicy       *bool    `pulumi:"enablePasswordPolicy"`
	EnableSupportRole          *bool    `pulumi:"enableSupportRole"`
	MinimumPasswordLength      *float64 `pulumi:"minimumPasswordLength"`
	PasswordReusePrevention    *float64 `pulumi:"passwordReusePrevention"`
	RequireLowercaseCharacters *bool    `pulumi:"requireLowercaseCharacters"`
	RequireNumbers             *bool    `pulumi:"requireNumbers"`
	RequireSymbols             *bool    `pulumi:"requireSymbols"`
	RequireUppercaseCharacters *bool    `pulumi:"requireUppercaseCharacters"`
}

// The set of arguments for constructing a Iam resource.
type IamArgs struct {
	AllowUsersToChangePassword pulumi.BoolPtrInput
	EnablePasswordPolicy       pulumi.BoolPtrInput
	EnableSupportRole          pulumi.BoolPtrInput
	MinimumPasswordLength      pulumi.Float64PtrInput
	PasswordReusePrevention    pulumi.Float64PtrInput
	RequireLowercaseCharacters pulumi.BoolPtrInput
	RequireNumbers             pulumi.BoolPtrInput
	RequireSymbols             pulumi.BoolPtrInput
	RequireUppercaseCharacters pulumi.BoolPtrInput
}

func (IamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamArgs)(nil)).Elem()
}

type IamInput interface {
	pulumi.Input

	ToIamOutput() IamOutput
	ToIamOutputWithContext(ctx context.Context) IamOutput
}

func (*Iam) ElementType() reflect.Type {
	return reflect.TypeOf((**Iam)(nil)).Elem()
}

func (i *Iam) ToIamOutput() IamOutput {
	return i.ToIamOutputWithContext(context.Background())
}

func (i *Iam) ToIamOutputWithContext(ctx context.Context) IamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamOutput)
}

// IamArrayInput is an input type that accepts IamArray and IamArrayOutput values.
// You can construct a concrete instance of `IamArrayInput` via:
//
//          IamArray{ IamArgs{...} }
type IamArrayInput interface {
	pulumi.Input

	ToIamArrayOutput() IamArrayOutput
	ToIamArrayOutputWithContext(context.Context) IamArrayOutput
}

type IamArray []IamInput

func (IamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Iam)(nil)).Elem()
}

func (i IamArray) ToIamArrayOutput() IamArrayOutput {
	return i.ToIamArrayOutputWithContext(context.Background())
}

func (i IamArray) ToIamArrayOutputWithContext(ctx context.Context) IamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamArrayOutput)
}

// IamMapInput is an input type that accepts IamMap and IamMapOutput values.
// You can construct a concrete instance of `IamMapInput` via:
//
//          IamMap{ "key": IamArgs{...} }
type IamMapInput interface {
	pulumi.Input

	ToIamMapOutput() IamMapOutput
	ToIamMapOutputWithContext(context.Context) IamMapOutput
}

type IamMap map[string]IamInput

func (IamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Iam)(nil)).Elem()
}

func (i IamMap) ToIamMapOutput() IamMapOutput {
	return i.ToIamMapOutputWithContext(context.Background())
}

func (i IamMap) ToIamMapOutputWithContext(ctx context.Context) IamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamMapOutput)
}

type IamOutput struct{ *pulumi.OutputState }

func (IamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Iam)(nil)).Elem()
}

func (o IamOutput) ToIamOutput() IamOutput {
	return o
}

func (o IamOutput) ToIamOutputWithContext(ctx context.Context) IamOutput {
	return o
}

type IamArrayOutput struct{ *pulumi.OutputState }

func (IamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Iam)(nil)).Elem()
}

func (o IamArrayOutput) ToIamArrayOutput() IamArrayOutput {
	return o
}

func (o IamArrayOutput) ToIamArrayOutputWithContext(ctx context.Context) IamArrayOutput {
	return o
}

func (o IamArrayOutput) Index(i pulumi.IntInput) IamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Iam {
		return vs[0].([]*Iam)[vs[1].(int)]
	}).(IamOutput)
}

type IamMapOutput struct{ *pulumi.OutputState }

func (IamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Iam)(nil)).Elem()
}

func (o IamMapOutput) ToIamMapOutput() IamMapOutput {
	return o
}

func (o IamMapOutput) ToIamMapOutputWithContext(ctx context.Context) IamMapOutput {
	return o
}

func (o IamMapOutput) MapIndex(k pulumi.StringInput) IamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Iam {
		return vs[0].(map[string]*Iam)[vs[1].(string)]
	}).(IamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamInput)(nil)).Elem(), &Iam{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamArrayInput)(nil)).Elem(), IamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamMapInput)(nil)).Elem(), IamMap{})
	pulumi.RegisterOutputType(IamOutput{})
	pulumi.RegisterOutputType(IamArrayOutput{})
	pulumi.RegisterOutputType(IamMapOutput{})
}
